export struct DriverConfiguration {
  name: string,
  number: int,
  car: string,
  team: string,
}

export struct CarConfiguration {
  id: string,
  workshop-id: string,
  version-overwrite: string,
}

export struct LeagueConfiguration {
  name: string,
  category: string,
  class: string,
  upgrade-file: string,
  livery-file-prefix: string,
  livery-file-suffix: string,
  version-prefix: string,
  cars: [CarConfiguration],
  car-names: [string],
  driver: [DriverConfiguration],
}

export struct Configuration {
  modmgr-path:string,
  modmgr-found: bool,
  workshop-path:string,
  workshop-found: bool,
  league-config:LeagueConfiguration,
}

export global ConfigurationState {
  in-out property <Configuration> data;

  pure callback modmgr-choose-dir();
  pure callback workshop-choose-dir();
  pure callback read-config();
  pure callback save-config();

  pure callback update-car-version(int, string);
  // move-car(index: i32, movement: i32)
  pure callback move-car(int, int);
  pure callback delete-car(int);
  // add-car(id: string, workshop_id: string, version_overwrite: string)
  pure callback add-car(string, string, string);

  pure callback update-driver-team(int, string);
  pure callback update-driver-car(int, string);
  // move-car(index: i32, movement: i32)
  pure callback move-driver(int, int);
  pure callback delete-driver(int);
  // add-car(name: string, number: string, car: string, team: string)
  pure callback add-driver(string, string, string, string);

  callback set-config(Configuration);
  set-config(cfg) => {
    data = cfg
  }

  callback set-car-names([string]);
  set-car-names(names) => {
    data.league-config.car-names = names;
  }
}
// export global Configuration {
//   in-out property <string> modmgr-path;
//   in-out property <bool> modmgr-found: false;
//   in-out property <string> workshop-path;
//   in-out property <bool> workshop-found: false;
//   in-out property <LeagueConfiguration> league-config;

//   pure callback modmgr-path-accepted(string);
//   pure callback modmgr-choose-dir();

//   pure callback workshop-path-accepted(string);
//   pure callback workshop-choose-dir();

//   pure callback read-config();
//   callback set-config(Configuration);
//   set-config(cfg) => { data = cfg }
// }